import pygame
import time
import random

pygame.init()

#define colors
white = (255,255,255)
black = (0,0,0)
red = (200,0,0)
green = (0,155,0)
blue = (0,0,255)

display_width = 800
display_height = 600

#Create the game board
gameDisplay = pygame.display.set_mode((display_width,display_height))

#Game Title
pygame.display.set_caption('Silther')

icon = pygame.image.load('apple.png')
pygame.display.set_icon(icon)

img = pygame.image.load('snakehead.png')
appleimg = pygame.image.load('apple.png')

#FPS Define
clock = pygame.time.Clock()

AppleThickness = 30
block_size = 20
fps = 20

direction = 'right'

smallfont = pygame.font.SysFont('monospace', 25)
medfont = pygame.font.SysFont('monospace', 30)
largefont = pygame.font.SysFont('monospace', 60)

def score(score):
	text = smallfont.render('Score: ' + str(score),True,black)
	gameDisplay.blit(text, [0,0])

def randAppleGen():
	randAppleX = round(random.randrange(0,display_width - AppleThickness))
	randAppleY = round(random.randrange(0,display_height - AppleThickness))
	return randAppleX, randAppleY



def game_intro():

	intro = True

	while intro:

		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				pygame.quit()
				quit() 

			if event.type == pygame.KEYDOWN:
				if event.key == pygame.K_c:
					intro = False
				if event.key == pygame.K_q:
					pygame.quit()
					quit()

		gameDisplay.fill(white)
		message_to_screen('Welcome to Slither', green, -100, size = 'large')

		message_to_screen('Eat as many red apples as you can!', black, -30)
		message_to_screen('Press C to play or Q to quit.', black, -60)

		pygame.display.update()
		clock.tick(5)


def snake(block_size, snakelist):

	if direction == 'right':
		head = pygame.transform.rotate(img, 270)

	if direction == 'left':
		head = pygame.transform.rotate(img, 90)

	if direction == 'up':
		head = img

	if direction == 'down':
		head = pygame.transform.rotate(img, 180)

	gameDisplay.blit(head, (snakelist[-1][0], snakelist[-1][1]))

	for XnY in snakelist[:-1]:
		pygame.draw.rect(gameDisplay, green, [XnY[0], XnY[1], block_size, block_size])

def text_objects(text, color,size):
	if size == 'small':
		textSurface = smallfont.render(text,True,color)
	elif size == 'medium':
		textSurface = medfont.render(text,True,color)
	elif size == 'large':
		textSurface = largefont.render(text,True,color)
	
	return textSurface, textSurface.get_rect()

def message_to_screen(msg,color, y_displace = 0, size = 'small'):
	textSurf, textRect = text_objects(msg, color,size)
	textRect.center = (display_width / 2), (display_height / 2) + y_displace
	gameDisplay.blit(textSurf, textRect)
	

#EVENT LOOP
def game_loop():

	global direction

	firection = 'right'
	gameExit = False
	gameOver = False

	#game movement
	lead_x = display_width / 2
	lead_y = display_height / 2

	lead_x_change = 10
	lead_y_change = 0

	snakelist = []
	snakelength = 1

	randAppleX,randAppleY = randAppleGen()

	while not gameExit:

		while gameOver == True:
			gameDisplay.fill(white)
			message_to_screen('Game Over', red, -20, size = 'large')
			message_to_screen('Press C to play again or Q to quit.', black, 20, size = 'medium')
			pygame.display.update()

			for event in pygame.event.get():
				if event.type == pygame.QUIT:
					gameExit = True
					gameOver = False

				if event.type == pygame.KEYDOWN:
					if event.key == pygame.K_q:
						gameExit = True
						gameOver = False
					if event.key == pygame.K_c:
						game_loop()

		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				gameExit = True

			# LEFT AND RIGHT MOVEMENT
			if event.type == pygame.KEYDOWN:
				if event.key == pygame.K_LEFT:
					direction = 'left'
					lead_x_change = -block_size
					lead_y_change = 0
				elif event.key == pygame.K_RIGHT:
					direction = 'right'
					lead_x_change = block_size
					lead_y_change = 0
				
				elif event.key == pygame.K_UP:
					direction = 'up'
					lead_y_change = -block_size
					lead_x_change = 0
				elif event.key == pygame.K_DOWN:
					direction = 'down'
					lead_y_change = block_size
					lead_x_change = 0
		
		#Screen Boundaries
		if lead_x >= display_width or lead_x <= 0 or lead_y >= display_height or lead_y <= 0:
			gameOver = True

		#LOGIC LOOP
		lead_x += lead_x_change
		lead_y += lead_y_change

		
		#call the background
		gameDisplay.fill(white)

		#pygame.draw.rect(gameDisplay, red, [randAppleX, randAppleY,AppleThickness, AppleThickness])

		gameDisplay.blit(appleimg,(randAppleX,randAppleY))
		
		snakeHead = []
		snakeHead.append(lead_x)
		snakeHead.append(lead_y)
		snakelist.append(snakeHead)

		if len(snakelist) > snakelength:
			del snakelist[0]

		for eachSegment in snakelist[:-1]:
			if eachSegment == snakeHead:
				gameOver = True

		snake(block_size, snakelist)

		score(snakelength - 1)
		
		pygame.display.update()


		if lead_x > randAppleX and lead_x < randAppleX + AppleThickness or lead_x + block_size > randAppleX and lead_x + block_size < randAppleX + AppleThickness:
			
			if lead_y > randAppleY and lead_y < randAppleY + AppleThickness:
				randAppleX,randAppleY = randAppleGen()
				snakelength += 1
			
			elif lead_y + block_size > randAppleY and lead_y + block_size < randAppleY + AppleThickness:
				randAppleX,randAppleY = randAppleGen()
				snakelength += 1


		

		#FPS Specification
		clock.tick(fps)





	# Quit out of PyGame
	pygame.quit()
	quit()

game_intro()
game_loop()
